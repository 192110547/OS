#include <stdio.h>

#define MAX 100

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int priority;
    int remainingTime;
    int completionTime;
    int waitingTime;
    int turnAroundTime;
};

int main() {
    int n, i, completed = 0, currentTime = 0, minPriorityIndex;
    float avgWaitingTime = 0, avgTurnAroundTime = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX];

    for (i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burstTime);
        printf("Enter priority for process %d (higher value = higher priority): ", processes[i].id);
        scanf("%d", &processes[i].priority);

        processes[i].remainingTime = processes[i].burstTime;
    }

    while (completed < n) {
        minPriorityIndex = -1;

        for (i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
                if (minPriorityIndex == -1 || processes[i].priority > processes[minPriorityIndex].priority) {
                    minPriorityIndex = i;
                }
            }
        }

        if (minPriorityIndex == -1) {
            currentTime++;
            continue;
        }

        processes[minPriorityIndex].remainingTime--;
        currentTime++;

        if (processes[minPriorityIndex].remainingTime == 0) {
            processes[minPriorityIndex].completionTime = currentTime;
            processes[minPriorityIndex].turnAroundTime = processes[minPriorityIndex].completionTime - processes[minPriorityIndex].arrivalTime;
            processes[minPriorityIndex].waitingTime = processes[minPriorityIndex].turnAroundTime - processes[minPriorityIndex].burstTime;

            avgWaitingTime += processes[minPriorityIndex].waitingTime;
            avgTurnAroundTime += processes[minPriorityIndex].turnAroundTime;

            completed++;
        }
    }

    avgWaitingTime /= n;
    avgTurnAroundTime /= n;

    printf("\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n",
               processes[i].id, processes[i].arrivalTime, processes[i].burstTime,
               processes[i].priority, processes[i].completionTime,
               processes[i].turnAroundTime, processes[i].waitingTime);
    }

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnAroundTime);

    return 0;
}
